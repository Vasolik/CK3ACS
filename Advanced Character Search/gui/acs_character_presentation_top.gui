template acs_skill_grid_text
{
    parentanchor = center
    margin_bottom = 4
    align = center
}

template acs_skill_grid_background
{
    name = "skill_icon_bg"
    texture = "gfx/interface/window_character/character_view_skills_bg.dds"
    framesize = { 70 26 }
    margin = { 5 0 }
}

types acs_character_presentation_top_types {

    type acs_character_header = widget  {
        layoutpolicy_horizontal = expanding

        size = { 800 33 }

        background = {
            using = Background_Area_Characterlist
        }

        background = {
            using = Background_Area_Dark

            modify_texture = {
                texture = "gfx/interface/component_masks/mask_fade_vertical_up.dds"
                blend_mode = alphamultiply
                alpha = 1
                rotate_uv = -90
            }
        }

        hbox = {
            margin_left = 3
            layoutpolicy_horizontal = expanding
            maximumsize = { 400 -1 }
            
            acs_domain_info = { }

            text_single = {
                using = Font_Size_Medium
                layoutpolicy_horizontal = expanding
                align = nobaseline
                text = "[Character.GetUINameNoTooltip]"
                autoresize = no
                fontsize_min = 9.99
                tooltip = "[Character.GetCharacterRelationCombine( GetPlayer )] [Character.GetUINameNoTooltip]"
            }

            hbox = {
                visible = "[And(Character.HasRelationTo( GetPlayer ), Not(Character.IsPlayer))]"
                text_single = {
                    raw_text = "â€¢"
                    align = nobaseline
                    margin = { 5 0 }
                }

                text_single = {
                    name = "character_relation"
                    text = "[Character.GetRelationToString( GetPlayer )]"
                    default_format = "#low"
                    align = nobaseline
                    fontsize_min = 9.99
                    max_width = 180
                }
                tooltip = "[Character.GetRelationToString( GetPlayer )]"
            }
        }

        hbox = {
            maximumsize = { 62 32 }
            position = { 420 0 }
            margin_right = 5
            spacing = 2
    
            text_single = {
                text = "[Character.GetAge]"
                align = nobaseline
                tooltip = "[Character.GetDeathOrBirthDateInfo]"
            }
            icon = {
                visible = "[Not(Character.IsDeadAndValid)]"
                size = { 23 23 }
                framesize = { 60 60 }
                frame = "[Character.GetHealthIconFrame]"
                texture = "gfx/interface/icons/character_status/icon_health.dds"
                tooltip = "[Character.GetHealthInfo]"
            }
    
            icon = {
                name = "is_dead"
                visible = "[Character.IsDeadAndValid]"
                size = { 23 23 }

                texture = "[Character.GetDeathReasonIcon]"
                tooltip = "CHARACTER_DEAD_TOOLTIP"
            }

            hbox = {
                visible = "[And( Character.HasLandedTitles, GreaterThan_CFixedPoint(Character.GetDread, '(CFixedPoint)0') )]"
                spacing = -2
                min_width = 40
                tooltip = "[Character.GetDreadBreakdown]"
                icon = {
                    name = "dread_icon"
                    size = { 23 23 }
                    texture = "gfx/interface/icons/icon_dread.dds"
                }

                text_single = {
                    name = "total_dread"
                    text = "[Character.GetDread|0]"
                    default_format = "#high"
                    align = center|nobaseline
                    fontsize_min = 9.99
                    max_width = 50
                }
            }
        }

        # Skills
        acs_hbox_skills_grid = {
            parentanchor = vcenter|right
            widgetanchor = vcenter|right
        } 
    }

    type acs_domain_info = widget {
        layoutpolicy_vertical = expanding
        size = { 80 33 }

        tooltip = "[Character.GetDomainLimitTooltip]"
        using = tooltip_ne

        background = {
            visible = "[GreaterThan_int32( Character.GetDomainSize, Character.GetDomainLimit )]"
            using = Status_Bad
            margin_bottom = -3
        }

        hbox = {
            text_single = {
                name = "value"
                text = "[Concatenate(Character.GetDomainSize, Concatenate('/', Concatenate(Character.GetDomainLimit, Concatenate(' (', Concatenate(Character.RealmSize, ')') ) ) ) )]"
                align = nobaseline
                margin_bottom = 1

                max_width = 110
            }
        }

        tooltipwidget = {
            container = {
                alwaystransparent = no
                name = "DefaultTooltipWidget"
                container = {
                    using = GeneralTooltipSetup
                    alwaystransparent = no
            
                    widget = {
                        name = "background"
                        using = DefaultTooltipBackground
                        size = { 100% 100% }
                        alwaystransparent = no
                    }
            
                    flowcontainer = {
                        direction = vertical
                        margin_right = 10
            
                        textbox = {
                            name = "TooltipText"
                            using = DefaultTooltipText
                            margin = { 20 20 }
                            margin_top = 10
            
                            fonttintcolor = "[TooltipInfo.GetTintColor]"
                            alwaystransparent = no
                        }

                        textbox = {
                            using = DefaultTooltipText
                            margin = { 20 20 }
                            margin_top = 10
                            text = "[realm_size|E]: [Character.RealmSize]"
                            fonttintcolor = "[TooltipInfo.GetTintColor]"
                            alwaystransparent = no
                            visible = "[GreaterThan_int32( Character.GetDomainSize, '(int32)0' )]"
                        }
                         
                        textbox = {
                            using = DefaultTooltipText
                            margin = { 20 20 }
                            margin_top = 10
                            text = "[Character.GetDefaultRealmFlagTooltipNoClickInfo]"
                            fonttintcolor = "[TooltipInfo.GetTintColor]"
                            alwaystransparent = no
                            visible = "[GreaterThan_int32( Character.GetDomainSize, '(int32)0' )]"
                        }
                    }
                }
            }
        }
    }

    type acs_hbox_skills_grid = hbox {
        name = "acs_skills_grid"
        maximumsize = { 215 25 }
		margin_right = 10
        widget = {
            size = { 32 25 }
            
            text_single = {
                using = acs_skill_grid_text
                text = "[Character.GetSkill( 'diplomacy' )]"
                tooltip = "[diplomacy|E] [Character.GetSkillWithLevel( 'diplomacy' )]"
            }

            background = {
                using = acs_skill_grid_background
                frame = 1
            }
        }
        widget = {
            size = { 32 25 }

            text_single = {
                using = acs_skill_grid_text
                text = "[Character.GetSkill( 'martial' )]"
                tooltip = "[martial|E] [Character.GetSkillWithLevel( 'martial' )]"
            }

            background = {

                using = acs_skill_grid_background
                frame = 2
            }
        }
        widget = {
            size = { 32 25 }

            text_single = {
                name = "value"
                using = acs_skill_grid_text
                text = "[Character.GetSkill( 'stewardship' )]"
                tooltip = "[stewardship|E] [Character.GetSkillWithLevel( 'stewardship' )]"
            }

            background = {
                using = acs_skill_grid_background
                frame = 3
            }
        }
        widget = {
            size = { 32 25 }

            text_single = {
                name = "value"
                using = acs_skill_grid_text
                text = "[Character.GetSkill( 'intrigue' )]"
                tooltip = "[intrigue|E] [Character.GetSkillWithLevel( 'intrigue' )]"
            }

            background = {

                using = acs_skill_grid_background
                block "bg"
                {
                    frame = 4
                }
            }
        }
        widget = {
            size = { 32 25 }

            text_single = {
                name = "value"
                using = acs_skill_grid_text
                text = "[Character.GetSkill( 'learning' )]"
                tooltip = "[learning|E] [Character.GetSkillWithLevel( 'learning' )]"
            }

            background = {

                using = acs_skill_grid_background
                block "bg"
                {
                    frame = 5
                }
            }
        }
        widget = {
            size = { 32 25 }

            text_single = {
                name = "value"
                using = acs_skill_grid_text
                text = "[Character.GetProwess]"
                tooltip = "[Character.GetProwessBreakdown]"
            }
        }   
    }
}
